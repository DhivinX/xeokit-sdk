import { type Capabilities, Component, EventEmitter, SDKError } from "@xeokit/core";
import type { FloatArrayParam } from "@xeokit/math";
import { Scene } from "@xeokit/scene";
import { View } from "./View";
import type { Renderer } from "./Renderer";
import type { ViewParams } from "./ViewParams";
declare class TickParams {
}
/**
 * A Browser-based 2D/3D model viewer.
 *
 * See {@link @xeokit/viewer} for usage.
 */
export declare class Viewer extends Component {
    #private;
    /**
     ID of this Viewer.
     */
    readonly id: string;
    /**
     True once this Viewer has been destroyed.

     Don't use this Viewer if this is ````false````.
     */
    readonly destroyed: boolean;
    /**
     * Indicates the capabilities of this Viewer.
     */
    readonly capabilities: Capabilities;
    /**
     * Emits an event each time a message is logged.
     *
     * @event
     */
    readonly onLog: EventEmitter<Viewer, string>;
    /**
     * Emits an event each time a Viewer "tick" occurs (~10-60 times per second).
     *
     * @event
     */
    readonly onTick: EventEmitter<Viewer, TickParams>;
    /**
     * Emits an event each time a {@link @xeokit/viewer!View} is created.
     *
     * @event
     */
    readonly onViewCreated: EventEmitter<Viewer, View>;
    /**
     * Emits an event each time a {@link @xeokit/viewer!View} is destroyed.
     *
     * @event
     */
    readonly onViewDestroyed: EventEmitter<Viewer, View>;
    /**
     * The Viewer's scene representation.
     */
    readonly scene: Scene;
    /**
     * Map of all the Views in this Viewer.
     *
     * Each {@link @xeokit/viewer!View} is an independently configurable view of the Viewer's models, with its own canvas, camera position, section planes, lights, and object visual states.
     */
    readonly views: {
        [key: string]: View;
    };
    /**
     * List of all the Views in this Viewer.
     *
     * Each {@link @xeokit/viewer!View} is an independently configurable view of the Viewer's models, with its own canvas, camera position, section planes, lights, and object visual states.
     */
    readonly viewList: View[];
    /**
     *  The number of {@link View | Views} belonging to this Viewer.
     */
    numViews: number;
    /**
     The time that this Viewer was created.
     */
    readonly startTime: number;
    /**
     * @private
     */
    readonly renderer: Renderer;
    /**
     Creates a Viewer.

     @param params - Viewer configuration.
     @param params.scene - Contains model representations.
     @param params.renderer - Manages rendering of models.
     @param params.id - ID for this Viewer, automatically generated by default.
     @param params.units - The measurement unit type. Accepted values are ````"meters"````, ````"metres"````, , ````"centimeters"````, ````"centimetres"````, ````"millimeters"````,  ````"millimetres"````, ````"yards"````, ````"feet"```` and ````"inches"````.
     @param params.scale - The number of Real-space units in each World-space coordinate system unit.
     @param params.origin - The Real-space 3D origin, in current measurement units, at which the World-space coordinate origin ````[0,0,0]```` sits.
     @param params.localeService - Locale-based translation service.

     */
    constructor(params: {
        scene?: Scene;
        renderer: Renderer;
        id?: string;
        units?: string;
        scale?: number;
        origin?: FloatArrayParam;
    });
    /**
     * Creates a new {@link @xeokit/viewer!View} within this Viewer.
     *
     * * The maximum number of views you're allowed to create is provided in {@link Capabilities.maxViews}. This
     * will be determined by the {@link Renderer} implementation the Viewer is configured with.
     * * To destroy the View after use, call {@link View.destroy}.
     * * You must add a View to the Viewer before you can create or load content into the Viewer's Viewer.
     *
     * ### Usage
     *
     * ````javascript
     * const view1 = myViewer.createView({
     *      id: "myView",
     *      canvasId: "myView1"
     *  });
     *
     * if (view1 instanceof SDKError) {
     *      console.log(view1.message);
     * } else {
     *      view1.camera.eye = [-3.933, 2.855, 27.018];
     *      view1.camera.look = [4.400, 3.724, 8.899];
     *      view1.camera.up = [-0.018, 0.999, 0.039];
     *
     *      //...
     * }
     * ````
     *
     * @param params View configuration.
     * @returns *{@link View}*
     * * On success.
     * @returns *{@link @xeokit/core!SDKError}*
     * * If View already exists with the given ID.
     * * Attempted to create too many Views - see {@link Capabilities.maxViews | Capabilities.maxViews}.
     */
    createView(params: ViewParams): View | SDKError;
    /**
     * Trigger redraw of all {@link View | Views} belonging to this Viewer.
     *
     * @private
     */
    redraw(): void;
    /**
     * Logs a console debugging message for this Viewer.
     *
     * The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*
     *
     * @private
     * @param message - The message to log
     */
    log(message: string): void;
    /**
     * Logs a warning for this Viewer to the JavaScript console.
     *
     * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*
     *
     * @private
     * @param message - The warning message to log
     */
    warn(message: string): void;
    /**
     * Logs an error for this Viewer to the JavaScript console.
     *
     * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*
     *
     * @private
     * @param message The error message to log
     */
    error(message: string): void;
    /**
     * Destroys this Viewer and all {@link View | Views} and {@link Plugin}s we've created within it.
     */
    destroy(): void;
    /**
     * @private
     * @param params
     */
    render(params: any): void;
}
export {};
